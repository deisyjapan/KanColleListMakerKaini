
//設定――――――――――――――――――――――――――――――――――
*listsavedialog

	Open@BrowseFolderMod "一覧の保存先", (dir_exe)
	if ( stat == 1 ){
		listsavedir = refstr
		objprm listSaveDirIId, listsavedir
	}

return

*sssavedialog

	Open@BrowseFolderMod "SSキャプチャの保存先", (dir_exe+"\\ScreenShots")
	if ( stat == 1 ){
		sssavedir = refstr
		objprm SSSaveDiriid, sssavedir
	}

return

*intervalshotsavedialog

	Open@BrowseFolderMod "連続撮影の保存先", (dir_exe+"\\ScreenShots")
	if ( stat == 1 ){
		intervalShotDir = refstr
		objprm intervalShotDirIId, intervalShotDir
	}

return

*videoCapSaveDialog

	Open@BrowseFolderMod "動画キャプチャの保存先", dir_exe
	if ( stat == 1 ){
		videoCapSaveDir = refstr
		objprm videoCapSaveDirIId, videoCapSaveDir
	}

return

*selectCapSaveDialog

	Open@BrowseFolderMod "範囲選択キャプチャの保存先", dir_exe
	if ( stat == 1 ){
		selectCapSaveDir = refstr
		objprm selectCapSaveDirIId, selectCapSaveDir
	}

return

*yabumiuploaderdialog

	dialog "exe", 16, ""
	if ( stat == 1 ){
		yabumidir = refstr
		objprm yabumIId, yabumidir
	}

return

*listsavefopen
	exec listsavedir, 16
return

*sssavefopen
	exec sssavedir, 16
return


*videoCapSaveFOpen
	exec videoCapSaveDir, 16
return

*LoadDefaultSaveName

	BId = stat
	if ( mode == MODE_OPTION ){
		if (optionMode == OPMODE_CAPTURE){

			saveName(saveNameSel) = defaultSaveName(saveNameSel)
			objprm saveNameIId, saveName(saveNameSel)

		}
		if (optionMode == OPMODE_VIDEOCAPTURE){
			if (BId == saveNameVideoCaptureIId-1){
				saveNameVideoCapture = "KCVideo_<yyyy><MM><dd>-<HH><mm><ss>"
				objprm saveNameVideoCaptureIId, saveNameVideoCapture
			}
		}
	}


return


*seqCapSaveFOpen

	if (intervalsavedir == "" || PathIsDirectory(intervalShotDir+"\\"+intervalsavedir) == 0 ){
		dialog "連続キャプチャがまだ開始されていません"
	} else {
		exec intervalShotDir+"\\"+intervalsavedir, 16
	}
return

*hotkeycapsetting
	nidPush

	if ( hotkeycap == 1 && hotkeystr != hotkeystr_temp ) {
		UnregisterHotKey WND_INFO(WND_MAIN, WI_HANDLE), HOTKEYID
		RegisterHotKey WND_INFO(WND_MAIN, WI_HANDLE), HOTKEYID, (MOD_ALT*hotkeycapalt)|(MOD_CONTROL*hotkeycapctrl)|(MOD_SHIFT*hotkeycapshift)|(MOD_WIN*hotkeycapwin), hotkeycode
		if (stat == 0){
			hotkeyset = 0
			hotkeystr_temp = ""
			logmessage = "ホットキーの設定に失敗しました"
		} else {
			hotkeyset = 1
			hotkeystr_temp = hotkeystr
			logmessage = "ホットキーを設定しました"
		}
	}


	if ( hotkeycap == 0 && hotkeyset == 1 ){
		UnregisterHotKey WND_INFO(WND_MAIN, WI_HANDLE), HOTKEYID
		hotkeyset = 0
		hotkeystr_temp = ""
		logmessage = "ホットキーを解除しました"
	}

	LogOut logmessage

	if ( hotkeyset && availablecap ) {
		gsel WND_MAIN, 0
		title "*"+SOFTNAME
	} else {
		gsel WND_MAIN, 0
		title SOFTNAME
	}

	nidPop
return

*yabumiupload

	if (mode == MODE_SSCAP) {
		gosub *ssCapture
		if (successFlg){
			execw yabumidir, "\""+(ssSaveDir +"\\"+ nSaveName)+"\""
		}
		successFlg = FLASE
	} else {
		gosub *make
		if (successFlg){
			execw yabumidir, "\""+(listsavedir +"\\"+ nSaveName)+"\""
		}
		successFlg = FLASE
	}
return

*Amazon
	dialog "Amazonのほしい物リストだよ！\nぜひポチって支援してね！！！", 2, "でちでち"
	if stat = 6:exec "http://www.amazon.co.jp/wishlist/181BGDSFXZC6M/?sort=priority", 16
return
