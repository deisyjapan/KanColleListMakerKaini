*ListDrag

	if (ginfo(24) == WND_GRID) {

		//縮小処理用
		buffer WND_TEMP1, maxScrSize(0), maxScrSize(1)
			SET_WND_INFO
		//背景コピー用
		buffer WND_TEMP2, maxScrSize(0), maxScrSize(1)
			SET_WND_INFO
		gsel WND_GRID

		dragdata = 0
		repeat

			stick sti, 256
			//左クリック用の処理ここから-----
			if (sti == 256){

				//mxy はドラッグを離した時点の座標
				//mxy_ はドラッグ開始の座標
				mxy(0) = limit(_mousex/cellsize(0), 0, cellnum(0)) , limit(_mousey/cellsize(1), 0, cellnum(1))

				if ( (listMode!=LISTMODE_FLEET) and (cliFlag==FALSE) and (bufIDPos(mxy(0),mxy(1))==0) ){
					if (_mousey > (cellsize(1)-10)){
						temph = ((_mousey+cellsize(1))-(cellsize(1)-10)) \ cellsize(1)
						if ( (0<=temph) and (temph<=20) ){
							listModeHNum = (_mousey+10)/cellsize(1)
							gosub *ChangeListModeHNum
							gosub *draw
							sti = 0
							cliflag = 0
							MultiSelectedFlg = FALSE
						}
					}
				}

				if (MultiSelectedFlg && cliflag==0 ){
					if ( selRange(CR_X)<=mxy(0) && mxy(0)<=(selRange(CR_X)+selRange(CR_W)) && selRange(CR_Y)<=mxy(1) && mxy(1)<=(selRange(CR_Y)+selRange(CR_H))){
						cliflag = 1
						mxy_(0) = mxy(0), mxy(1)
						mxyi(0) = mxy(0)-selRange(CR_X), mxy(1)-selRange(CR_Y)
						mxy_(0) = mxy_(0)-mxyi(0), mxy_(1)-mxyi(1)
						mindexxy(0) = (_mousex-(mxy_(0)*(cellsize(0)-1))), (_mousey-(mxy_(1)*(cellsize(1)-1)))

						gsel WND_TEMP2
						pos 0, 0
						gcopy 1, 0, 0, maxScrSize(0), maxScrSize(1)
						gsel WND_TEMP1
						pos 0, 0
						gcopy WND_GRID, selRange(CR_X)*cellsize(0), selRange(CR_Y)*cellsize(1), selRange(CR_W)*cellsize(0), selRange(CR_H)*cellsize(1)
						gsel WND_GRID, 0

					} else {
						MultiSelectedFlg = FALSE
					}
				}

				if ( bufIDPos(mxy(0), mxy(1) )>=100 && cliflag==0 && (MultiSelectedFlg^1)){
					cliflag = 1
					mxy_(0) = mxy(0), mxy(1)
					mindexxy(0) = (_mousex-(mxy_(0)*(cellsize(0)-1))), (_mousey-(mxy_(1)*(cellsize(1)-1)))
					gsel WND_TEMP2
					pos 0, 0
					gcopy 1, 0, 0, maxScrSize(0), maxScrSize(1)
					gsel WND_TEMP1
					pos 0, 0
					gzoom cellsize(0), cellsize(1), bufIDPos(mxy_(0), mxy_(1)), cutRange(0), cutRange(1), cutRange(2), cutRange(3), 1
					gsel WND_GRID, 0
				}
				//クリックされていなかったら無駄にループが回るのを防ぐ
				if (cliFlag == 0){
					//強制的に右クリックを離した扱いにする
					sti = 0
				}
			}

			if (cliflag == 1){
				redraw 0
				pos 0, 0
				gcopy WND_TEMP2, 0, 0, maxScrSize(0), maxScrSize(1)
				gmode 4, cellsize(0), cellsize(1), 100
				pos _mousex-mindexxy(0), _mousey-mindexxy(1)

				if (MultiSelectedFlg^1){
					gcopy WND_TEMP1, 0, 0, cellsize(0), cellsize(1)
				} else {
					gcopy WND_TEMP1, 0, 0, selRange(CR_W)*cellsize(0), selRange(CR_H)*cellsize(1)
				}
				gmode 0
				redraw 1
			}

			if (sti == 0 && cliflag == 1){

				if (MultiSelectedFlg^1){
					if (_mousex < 0) | (_mousex > scrsize(0)) | (_mousey < 0) | (_mousey > scrsize(1)){
						//マウス座標がウィンドウ外のとき
						if bufIDPos(mxy_(0), mxy_(1)) >= 100{
							loadPicBufID( bufIDPos(mxy_(0), mxy_(1)) - 100 ) = 0
							bufIDPos(mxy_(0), mxy_(1)) = 0
							LogOut "セル("+mxy_(0)+", "+mxy_(1)+")を削除しました"
							listLoadedNum--
						}
					} else {
						temp = bufIDPos(mxy_(0), mxy_(1))
						bufIDPos(mxy_(0), mxy_(1)) = bufIDPos(mxy(0), mxy(1))
						bufIDPos(mxy(0), mxy(1)) = temp
						LogOut "セル("+mxy_(0)+", "+mxy_(1)+")をセル("+mxy(0)+", "+mxy(1)+")に移動しました"
					}
				} else {

					mxy(0) = mxy(0)-mxyi(0), mxy(1)-mxyi(1)
					repeat selRange(CR_H)
						ycnt = cnt
						if ((mxy(1)+ycnt)<0):continue
						if ((mxy(1)+ycnt)>cellNum(1)): continue
						repeat selRange(CR_W)
							if ((mxy(0)+cnt)>cellNum(0)): continue
							if ((mxy(0)+cnt)<0):continue
							temp = bufIDPos(mxy_(0)+cnt, mxy_(1)+ycnt)
							bufIDPos(mxy_(0)+cnt, mxy_(1)+ycnt) = bufIDPos(mxy(0)+cnt, mxy(1)+ycnt)
							bufIDPos(mxy(0)+cnt, mxy(1)+ycnt) = temp
						loop
					loop
					LogOut "選択範囲を移動しました"

				}

				mxy(0) = 0, 0
				mxy_(0) = 0, 0
				mxyi(0) = 0, 0
				temp = 0
				cliflag = 0
				MultiSelectedFlg = FALSE
				gosub *draw
			}

			if ( sti==0 && cliflag==0 ){
				break
			}
			//左クリック用の処理ここまで-----

			await 16
		loop

	}

	MultiSelectedFlg = FALSE

return

*ListRelocation

	if (ginfo(24) != WND_GRID) :return
	gsel WND_GRID

	repeat

		stick sti, 512
		if (sti == 512){
			if (RCliFlag == FALSE){
				staMPos = ginfo_mx, ginfo_my
				staMPosWnd = _mousex, _mousey
				MoveWindow WND_INFO(WND_OVERLAY, WI_HANDLE), 0, 0, 0, 0, 1
				gsel WND_OVERLAY, 2
				gsel WND_GRID
				RCliFlag = TRUE
			}
			if (RCliFlag){

				dragW = abs(staMPos(0)-ginfo_mx)
				dragH = abs(staMPos(1)-ginfo_my)
				dragWnd = abs(staMPosWnd(0)-_mousex), abs(staMPosWnd(1)-_mousey)

				if staMPos(CR_X) < ginfo_mx: overRlayWndX = staMPos(0): else: overRlayWndX = _ginfo_mx
				if staMPos(CR_Y) < ginfo_my: overRlayWndY = staMPos(1): else: overRlayWndY = _info_my
				if staMPosWnd(CR_X) < _mousex: selMPosX = staMPosWnd(0): else: selMPosX = _mousex
				if staMPosWnd(CR_Y) < _mousey: selMPosY = staMPosWnd(1): else: selMPosY = _mousey

				MoveWindow WND_INFO(WND_OVERLAY, WI_HANDLE), overRlayWndX, overRlayWndY, dragW, dragH, 1
			}
		}

		if ((sti == 0) && RCliFlag){
			gsel WND_OVERLAY, -1
			gsel WND_GRID
			RCliFlag = FALSE

			dim selRange, 4
			selRange(CR_X) = selMPosX/cellsize(0)
			selRange(CR_Y) = selMPosY/cellsize(1)
			selRange(CR_W) = (selMPosX+dragWnd(CR_X)+cellsize(0))/cellsize(0) - selRange(CR_X)
			selRange(CR_H) = (selMPosY+dragWnd(CR_Y)+cellsize(1))/cellsize(1) - selRange(CR_Y)

			MultiSelectedFlg = FALSE
			if (selRange(CR_W) == 1 && selRange(CR_H) == 1): break

			MultiSelectedFlg = TRUE
			gosub *draw
			break
		}
		await 16
	loop

return
//*/

//描画――――――――――――――――――――――――――――――――――
*draw

	gsel WND_GRID, 0
	redraw 0

	color 255, 255, 255
	boxf
	color 150, 150, 150

	pos int(0.33333334*scrsize(0)), 20
	gzoom int(0.66666667*scrsize(0)), int(0.15625*scrsize(0)), WND_GRID_STRING, 0, 0, 640, 150

	If (listMode != LISTMODE_FLEET){
		color 240, 240, 255
		repeat cellnum(1), 1
			boxf -1, cnt*cellsize(1)-10, maxScrSize(0)+1, cnt*cellsize(1)+10
		loop
		color
	}

	repeat cellnum(0), 1
		line cnt*cellsize(0), -1, cnt*cellsize(0), maxScrSize(1)+1
	loop
	repeat cellnum(1), 1
		line -1, cnt*cellsize(1), maxScrSize(0)+1, cnt*cellsize(1)
	loop

	repeat cellnum(1)+1
		ycnt = cnt
		repeat cellnum(0)+1
			if bufIDPos(cnt, ycnt) >= 100{
				pos cnt*cellsize(0), ycnt*cellsize(1)
				//assert
				gzoom cellsize(0), cellsize(1), bufIDPos(cnt, ycnt), cutRange(0), cutRange(1), cutRange(2), cutRange(3), 1
			}
		loop
	loop

	If (listMode != LISTMODE_FLEET){
		color 32, 32, 192
		boxf -1, cellsize(1)*listModeHNum-2, maxScrSize(0)+1, cellsize(1)*listModeHNum
		color
	}

	if (listMode == LISTMODE_FLEET && nishimuraFlg ) {
		color
		if tuika1 {
			line cellsize(0)  , cellsize(1)*3  , cellsize(0)*4  , cellsize(1)*4
			line cellsize(0)+1, cellsize(1)*3  , cellsize(0)*4  , cellsize(1)*4-1
			line cellsize(0)  , cellsize(1)*3+1, cellsize(0)*4-1, cellsize(1)*4
		}
		if tuika4 {
			line cellsize(0)*3  , 0, cellsize(0)*4  , cellsize(1)
			line cellsize(0)*3+1, 0, cellsize(0)*4  , cellsize(1)-1
			line cellsize(0)*3  , 1, cellsize(0)*4-1, cellsize(1)

			line cellsize(0)*3  , cellsize(1)*2  , cellsize(0)*4  , cellsize(1)*4
			line cellsize(0)*3+1, cellsize(1)*2  , cellsize(0)*4  , cellsize(1)*4-1
			line cellsize(0)*  3, cellsize(1)*2+1, cellsize(0)*4-1, cellsize(1)*4
		}
	}

	if (listMode == LISTMODE_FLEET && fleetPunctuation){
		color ((PunctuationColor&0x00FF0000)>>16), ((PunctuationColor&0x0000FF00)>>8), (PunctuationColor&0x000000FF)
		if (nishimuraFlg^1){
			if tuika1 {
				boxf 2*cellsize(0)-1, -1, 2*cellsize(0)+1, maxScrSize(1)+1
				boxf 4*cellsize(0)-1, -1, 4*cellsize(0)+1, maxScrSize(1)+1
				boxf -1, cellsize(1)*3-1, maxScrSize(0)+1, cellsize(1)*3+1
			}
			if tuika4 {
				boxf 3*cellsize(0)-1, -1, 3*cellsize(0)+1, maxScrSize(1)+1
				boxf -1, cellsize(1)*2-1, maxScrSize(0)+1, cellsize(1)*2+1
				boxf -1, cellsize(1)*4-1, maxScrSize(0)+1, cellsize(1)*4+1
			}
		} else {
			if tuika1 {
				boxf 2*cellsize(0)-1, -1, 2*cellsize(0)+1, maxScrSize(1)+1
			}
			if tuika4 {
				boxf -1, cellsize(1)*2-1, maxScrSize(0)+1, cellsize(1)*2+1
			}
		}
		if tuika2 {
			boxf -1, cellsize(1)-1, maxScrSize(0)+1, cellsize(1)+1
			boxf -1, cellsize(1)*2-1, maxScrSize(0)+1, cellsize(1)*2+1
			boxf -1, cellsize(1)*3-1, maxScrSize(0)+1, cellsize(1)*3+1
			boxf -1, cellsize(1)*4-1, maxScrSize(0)+1, cellsize(1)*4+1
			boxf -1, cellsize(1)*5-1, maxScrSize(0)+1, cellsize(1)*5+1

		}
		if tuika3 {
			boxf cellsize(0)-1, -1, cellsize(0)+1, maxScrSize(1)+1
			boxf cellsize(0)*2-1, -1, cellsize(0)*2+1, maxScrSize(1)+1
			boxf cellsize(0)*3-1, -1, cellsize(0)*3+1, maxScrSize(1)+1
			boxf cellsize(0)*4-1, -1, cellsize(0)*4+1, maxScrSize(1)+1
			boxf cellsize(0)*5-1, -1, cellsize(0)*5+1, maxScrSize(1)+1
		}

		color
	}

	if (MultiSelectedFlg) {
		gmode 4, selRange(CR_W)*cellsize(0), selRange(CR_H)*cellsize(1), 128
		pos selRange(CR_X)*cellsize(0), selRange(CR_Y)*cellsize(1)
		gcopy WND_OVERLAY, 0, 0, selRange(CR_W)*cellsize(0), selRange(CR_H)*cellsize(1)
		gmode
	}

	redraw 1
return


*ChangeListModeHNum
	//配列を複製
	dim temp_bufIDPos, CELL_MAX_W, CELL_MAX_H
	repeat CELL_MAX_H
		cntY = cnt
		repeat CELL_MAX_W
			cntX = cnt
			temp_bufIDPos(cntX, cntY) = bufIDPos(cntX, cntY)
			bufIDPos(cntX, cntY) = 0
		loop
	loop

	//最大配置数を計算
	maxCount = (cellNum(0)+1)*ListModeHNum
	count = 0
	repeat (cellNum(0)+1) * (cellNum(1)+1)
		//順番に見て存在したら再配置
		if temp_bufIDPos(cnt/(cellnum(1)+1), cnt\(cellnum(1)+1)) >= 100{
			bufIDPos(count/ListModeHNum, count\ListModeHNum) = temp_bufIDPos(cnt/(cellnum(1)+1), cnt\(cellnum(1)+1))
			count++
		}
		//最大配置数になったら抜ける
		if (maxCount == count) :break
	loop
return
