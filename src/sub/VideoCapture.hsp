*VideoCap

	nidPush

	if (ffmpegDir == ""){
		dialog "動画キャプチャには事前に設定が必要です。\n設定画面に移動しますか？", 2, "ffmpegが設定されていません"
		if (stat == 6){
			mode = MODE_OPTION
			optionMode = OPMODE_VIDEOCAPTURE
			gosub *drawMainWindow
		}
		return
	}

	if (audioDeviceName == ""){
		gsel WND_MAIN

		dialog "オーディオデバイスが選択されていません。\n設定画面を開きますか？",2
		if (stat == 6){
			mode = MODE_OPTION
			optionMode = OPMODE_VIDEOCAPTURE
			gosub *drawMainWindow

			optionModePrev = 0
			modePrev = mode

			nidPop
			return
		} else {
			LogOut "動画キャプチャを中止しました。"
			nidPop
			return
		}
	}

	if (lateEncodeFlg){

		if (confirmCancelVideoCapture){
			dialog "現在エンコード中です\n録画した内容が消えますが、中止してよろしいですか？", 3, "確認"
			if (stat == 6 && lateEncodeFlg){
				gosub *VideoCapEmgStop
				LogOut "Info-エンコードを中断\n動画キャプチャを取り消しました"
				nidPop
			}
		} else {
			gosub *VideoCapEmgStop
			LogOut "Info-エンコードを中断\n動画キャプチャを取り消しました"
			nidPop
		}
		return
	}


	if (videoCapFlg == FALSE){

		sdim ffbuf, 1024*4
		ResetFFMPEGLog
		apid = 0
		vpid = 0
		pid = 0
		encodeElapsedTime = 0
		encodeSpeed = 0.0
		estimatedTime = 0
		remainingTime = 0
		encodeTime = 0

		sscapwh(0) = sscap(2)-sscap(0), sscap(3)-sscap(1)

		GetAbsPos videoCapX, videoCapY

		//縦横をを4の整数倍に整形
		videoCapSizeX = int((0.25*sscapwh(0))+0.9999999)*4
		videoCapSizeY = int((0.25*sscapwh(1))+0.9999999)*4

		//音声なしならフラグを立てる
		noAudioFlg = FALSE
		if (audioDeviceName == "音声なし"): noAudioFlg = TRUE

		//x264のプリセットを文字で取得する
		x264presetStr = ""
		notesel x264presetList
		noteget x264presetStr, x264presetNum
		noteunsel

		videoFileName = strf("%s\\%s", videoCapSaveDir, Format@DateTimeFormatMod(saveName(SN_VIDEO)) )

		//コマンドの組み立て
		if (noAudioFlg^1){
			//オーデイオあり
			cmda = strf("\"%s\" -vn -f dshow -i audio=\"%s\" -acodec pcm_s16le -ac 2 -ar 44100 \"%s_a.wav\"", ffmpegdir, audioDeviceName, videoFileName)
		} else {
			cmda = strf("cmd")
		}

		if (lateEncode){
			//負荷軽減動画キャプチャ
			cmdv  = strf("\"%s\" -an -f gdigrab -draw_mouse %d -show_region %d ", ffmpegdir, videoCapHideCursor^1, videoCapShowFrame)
			cmdv += strf("-video_size %dx%d -offset_x %d -offset_y %d ",videoCapSizeX, videoCapSizeY, videoCapX, videoCapY)
			cmdv += strf("-framerate %d/1 -i desktop -vf fps=%d -pix_fmt yuv420p -c:v libx264 -crf %d -preset %s \"%s_v.mp4\"", videoCapFR, videoCapFR, 16, "ultrafast", videoFileName)
		} else {
			cmdv  = strf("\"%s\" -an -f gdigrab -draw_mouse %d -show_region %d ", ffmpegdir, videoCapHideCursor^1, videoCapShowFrame)
			cmdv += strf("-video_size %dx%d -offset_x %d -offset_y %d ",videoCapSizeX, videoCapSizeY, videoCapX, videoCapY)
			cmdv += strf("-framerate %d/1 -i desktop -vf fps=%d -pix_fmt yuv420p -c:v libx264 -crf %d -preset %s \"%s_v.mp4\"", videoCapFR, videoCapFR, videoCapCRF, x264presetStr, videoFileName)
		}

		pipe2exec cmda
		apid = stat
		aStartTime2 = timeGetTime()
		pipe2exec cmdv
		vpid = stat
		vStartTime2 = timeGetTime()

		if ( (apid == -1) || (vpid == -1) ){
			LogOut "動画キャプチャの開始に失敗しました"
			return
		}

		videoCapFlg = TRUE
		videoCapStartTime = timeGetTime()

		SetTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID, 400, 0

		videoCapMes = "停止"
		if (mode == MODE_SSCAP){
			gsel WND_MAIN
			objprm videoCapBId, videoCapMes
		}

		gosub *SSModeControlDisable
		gosub *VideoCapTimerProcessing

	} else {

		videoCapMes = "中止"
		if (mode == MODE_SSCAP){
			gsel WND_MAIN
			objprm videoCapBId, videoCapMes
		}

		videoCapFlg = FALSE
		KillTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID

		videoCapTime = timeGetTime() - videoCapStartTime

		if (noAudioFlg^1){
			pipe2put apid, "q" //録音の停止
		} else {
			pipe2put apid, "exit\n"
		}
		pipe2put vpid, "q" //動画キャプチャの停止

		exf = 0
		exfv = 0
		exfa = 0
		repeat //終了の待機
			if (exfv == 0){
				ffbuf = ""
				pipe2check vpid
				if stat == 0:exfv = 1
				if stat & 2: pipe2get vpid, ffbuf
				if stat & 4: pipe2err vpid, ffbuf
				if (ffbuf != ""){
					strrep ffbuf, "\r", "\n"
					strrep ffbuf, "\r\r", "\r"
					AddFFmpegLog ffbuf
				}
			}
			if (exfa == 0){
				ffbuf = ""
				pipe2check apid
				if stat == 0:exfa = 1
				if stat & 2: pipe2get apid, ffbuf
				if stat & 4: pipe2err apid, ffbuf
				if (ffbuf != ""){
					strrep ffbuf, "\r", "\n"
					strrep ffbuf, "\r\r", "\r"
					AddFFmpegLog "", ffbuf
				}
			}
			logmes strf("cnt %d  exfv %d  exfa %d",cnt, exfv, exfa)
			if (exfv && exfa): break
		loop

		apid = -1
		vpid = -1

		//エンコードの開始
		LateEncodeFlg = TRUE
		lateEncodeStartTime = timeGetTime()

		diffTime2 = 0.001*(aStartTime2-vStartTime2)
		logmes "vStartTime2 :"+vStartTime2
		logmes "aStartTime2 :"+aStartTime2
		logmes "diffTime2   :"+diffTime2+"s\n"

		ddim vStartTime, 1
		ddim aStartTime, 1
		vStartTime = GetVideoStartTime()
		aStartTime = GetAudioStartTime()
		logmes "video UNIXTIME   :"+vStartTime
		logmes "audio SYSTEMTIME :"+aStartTime
		diffTime = 0.0

		if (vStartTime!=0.0 && aStartTime!=0.0){
			vStartTime = 11644473600.0+vStartTime
			dim FILETIME, 2
			GetSystemTimeAsFileTime varptr(FILETIME)
			aStartTime = -0.001*timeGetTime() + aStartTime + (4294967295.0*FILETIME(1) + (FILETIME(0)&0x7FFFFFFF) + -2147483648.0*((d(0)&0x80000000)>>31) )/10000000.0
			diffTime = (aStartTime-vStartTime)/1000
			//2秒以上ズレずれていたら無かったことにする
			if ( absf(diffTime)>2.0 ){
				diffTime = diffTime2
			}
		}

		//2秒以上ズレずれていたら無(ry)
		if ( absf(diffTime)>2.0 ){
			diffTime = 0.0
		}

		logmes "vStartTime :"+vStartTime
		logmes "aStartTime :"+aStartTime
		logmes "diffTime   :"+diffTime+"s\n"

		if (audioNormalize){
			normalizeStr = "-af volumedetect"
		} else {
			normalizeStr = ""
		}
		volumeStr = str(int(2.56*volume+0.5))

		//コマンド組み立て
		if (noAudioFlg^1){
			if (lateEncode){
				//オーデイオ有り負荷軽減動画キャプチャ
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -ss %f -i \"%s_a.wav\" -vol %s %s -c:v libx264 -crf %d -preset %s -c:a aac -b:a 128k \"%s.mp4\"", ffmpegdir, videoFileName, difftime, videoFileName, volumeStr, normalizeStr, videoCapCRF, x264presetStr, videoFileName)
			} else {
				//オーデイオ有り従来の動画キャプチャ
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -ss %f -i \"%s_a.wav\" -vol %s %s -c:v copy -c:a aac -b:a 128k \"%s.mp4\"", ffmpegdir, videoFileName, difftime, videoFileName, volumeStr, normalizeStr, videoFileName)
			}
		} else {
			if (lateEncode){
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -c:v libx264 -crf %d -preset %s \"%s.mp4\"", ffmpegdir, videoFileName, videoCapCRF, x264presetStr, videoFileName)
			} else {
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -c:v copy \"%s.mp4\"", ffmpegdir, videoFileName, videoFileName)
			}
		}
		pipe2exec cmdm
		mpid = stat
		logmes "cmdm :"+cmdm

		if ( mpid == -1 ){

			gosub *VideoCapEmgStop
			LogOut "Error-エンコードプロセスの開始に失敗しました"

			nidPop
			return
		}

		SetTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID, 500, 0
		gosub *SSModeControlEnable
		gosub *LateEncodeTimerProcessing

	}
	nidPop
return

*VideoCapTimerProcessing

	logmes "VideoCapTimerProcessing"

	nidPush

	exfv = 0
	exfa = 0

	gsel WND_FFMPEG

	ffbuf = ""
	pipe2check vpid
	if (stat == 0): exfv = 1: vpid = -1
	if (stat & 2): pipe2get vpid, ffbuf
	if (stat & 4): pipe2err vpid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog ffbuf
	}

	ffbuf = ""
	pipe2check apid
	if (stat == 0): exfa = 1: apid = -1
	if (stat & 2): pipe2get apid, ffbuf
	if (stat & 4): pipe2err apid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog "", ffbuf
	}

	gsel WND_MAIN

	if (exfv || exfa){
		gosub *VideoCapEmgStop

		logmessage =  "Error-動画キャプチャを停止しました\n"
		if (exfv): logmessage += "動画プロセスが異常停止しました\n"
		if (exfa): logmessage += "音声プロセスが異常停止しました\n"

		LogOut logmessage
		nidPop
		return
	}

	elapsedTime = timeGetTime() - videoCapStartTime
	elapsedTimeStr = "動画をキャプチャ中…\n"
	elapsedTimeStr += strf("  経過時間 %s\n", cnvMilliSecondToMMSSMS@DateTimeFormatMod(elapsedTime))

	gsel WND_MAIN
	LogOut elapsedTimeStr

	if (enableVideoCapLimit){
		if (videoCapLimitTime < elapsedTime){
			gosub *VideoCap
		}
	}

	nidPop
return

*LateEncodeTimerProcessing

	nidPush

	exfm = 0

	ffbuf = ""
	pipe2check mpid
	if (stat == 0): exfm = 1: mpid = -1
	if (stat & 2): pipe2get mpid, ffbuf
	if (stat & 4): pipe2err mpid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog "", "", ffbuf
	}

	lastStr = ""
	notesel ffbuf
	noteget lastStr, notemax-1
	noteunsel

	//encodeTime リアルタイムの経過時間
	encodeTime = timeGetTime() - lateEncodeStartTime

	if (strmid(lastStr, 0, 5) == "frame"){
		timeStrIndex = instr(lastStr, 0, "time=")
		if ( timeStrIndex != -1){
			TimeStr = ""
			getstr TimeStr, lastStr, timeStrIndex+5, ' '
			logmes "TimeStr "+TimeStr
			if (instr(TimeStr, 0, ":") == -1){
				encodeElapsedTime = int(double(TimeStr)*1000.0)
				logmes "ss.ms "+encodeElapsedTime
			} else {
				encodeElapsedTime = int(strmid(TimeStr, 0, 2))*3600000 + int(strmid(TimeStr, 3, 2))*60000 + int(double(strmid(TimeStr, 6, 5))*1000.0)
				logmes "HH:MM:ss.ms "+encodeElapsedTime
			}

			encodeElapsedTime += 300

			//エンコードスピード
			encodeSpeed = 1.0*encodeElapsedTime/encodeTime

			logmes "encodeSpeed "+encodeSpeed
			logmes "ffSpeed     "+ffSpeed
			//予想合計エンコード時間
			estimatedTime = 1.0*videoCapTime/encodeSpeed
		}
	}

	//予想合計エンコード時間
	remainingTime = estimatedTime-encodeTime
	if (remainingTime < 0.0): remainingTime = 0.0

	lateEncodeStr = "動画をエンコード中…\n"
	lateEncodeStr += strf("  経過時間 %s\n", cnvMilliSecondToMMSSMS@DateTimeFormatMod(encodeTime))
	lateEncodeStr += strf("  推定残り %s", cnvMilliSecondToMMSSMS@DateTimeFormatMod(remainingTime))

	LogOut lateEncodeStr

	if (exfm){
		lateEncodeFlg = FALSE
		KillTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID

		gosub *VidepCapFinish
		return
	}

	nidPop
return


*VidepCapFinish
	nidPush

	apid = -1
	vpid = -1
	mpid = -1

	exist videoFileName+"_v.mp4"
	if (strsize != -1): delete videoFileName+"_v.mp4"
	exist videoFileName+"_a.wav"
	if (strsize != -1): delete videoFileName+"_a.wav"

	LogOut strf("%s.mp4を保存しました。", getpath@getpathMod(videoFileName, 8))

	videoCapMes = "開始"
	if (mode == MODE_SSCAP){
		gsel WND_MAIN
		objprm videoCapBId, videoCapMes
	}

	gosub *SSModeControlEnable

	nidPop
return


*VideoCapEmgStop

	logmes "異常停止の発生"

	videoCapFlg = FALSE
	lateEncodeFlg = FALSE

	KillTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID
	KillTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID

	exfv = 1
	exfa = 1
	exfm = 1

	if (apid != -1): pipe2term apid: exfa = 0: logmes "オーディオプロセスが生きてる"
	if (vpid != -1): pipe2term vpid: exfv = 0: logmes "ビデオプロセスが生きてる"
	if (mpid != -1): pipe2term mpid: exfm = 0: logmes "エンコードプロセスが生きてる"

	repeat //終了の待機
		if (exfv == 0){
			ffbuf = ""
			pipe2check vpid
			if stat == 0:exfv = 1
			if stat & 2: pipe2get vpid, ffbuf
			if stat & 4: pipe2err vpid, ffbuf
		}
		if (exfa == 0){
			ffbuf = ""
			pipe2check apid
			if stat == 0:exfa = 1
			if stat & 2: pipe2get apid, ffbuf
			if stat & 4: pipe2err apid, ffbuf
		}
		if (exfm == 0){
			ffbuf = ""
			pipe2check mpid
			if stat == 0:exfm = 1
			if stat & 2: pipe2get mpid, ffbuf
			if stat & 4: pipe2err mpid, ffbuf
		}
		logmes strf("cnt %d  exfv %d  exfa %d  exfm %d",cnt, exfv, exfa, exfm)
		if (exfv && exfa && exfm): break
	loop

	apid = -1
	vpid = -1
	mpid = -1

	exist videoFileName+"_v.mp4"
	if (strsize != -1): delete videoFileName+"_v.mp4"
	exist videoFileName+"_a.wav"
	if (strsize != -1): delete videoFileName+"_a.wav"
	exist videoFileName+".mp4"
	if (strsize != -1): delete videoFileName+".mp4"

	videoCapMes = "開始"
	if (mode == MODE_SSCAP){
		gsel WND_MAIN
		objprm videoCapBId, videoCapMes
	}

	gosub *SSModeControlEnable

return


*VideoCapSetting
	//audioDeviceNameからaudioDeviceListNumを取得するためのサブルーチン
	//起動時に一度だけ呼び出される

	GetAudioDevice ffmpegdir, audioDeviceList
	audioDeviceList += "音声なし"
	audioDeviceListNum = -1
	if (audioDeviceName != ""){
		notesel audioDeviceList
		repeat notemax
			noteget tempStr, cnt
			if (audioDeviceName == tempStr){
				audioDeviceListNum = cnt
				break
			}
		loop
		noteunsel
		if (audioDeviceListNum == -1){
			audioDeviceName = ""
		}
	}

return

*SetAudioDeviceName
	//リストボックスをクリックした時に呼び出されるサブルーチン
	//WindowMessageEventからクリックするたびに呼び出される

	sendmsg hAudioDeviceLB, LB_GETCURSEL
	audioDeviceListNum = stat
	notesel audioDeviceList
	noteget audioDeviceName, audioDeviceListNum
	noteunsel

	logmes "audioDeviceName :"+audioDeviceName

return


*openDialogffmpeg
	//ffmpeg探すダイアログを開くためのサブルーチン
	//ボタンを押す度に呼び出される

	nidPush

	gsel WND_MAIN

	dialog "exe", 16, "ffmpeg.exe"
	if (stat==1){
		ffmpegDir = refstr
	} else {
		ffmpegDir = ""
	}

	//成功なら0が帰る
	GetAudioDevice ffmpegdir, audioDeviceList
	audioDeviceList += "音声なし"
	if (stat!=0){ //失敗したら
		ffmpegdir = ""
	}

	notesel audioDeviceList
	audioDeviceListNum = notemax
	noteunsel

	gosub *drawMainWindow

	nidPop
return

*ffmpegDownload

	nidPush
	gsel WMD_MAIN, 1

	//ハッシュ値が空、つまり情報が取得されていない場合はバージョンチェックを無理やり実行する
	if (ffmpegDownloadHash == ""){
		//ffmpegDownloadHashがからということは自動バージョンチェックが無効になっているということ…
		autoVersionCheck = TRUE
		gosub *VerCheck
		autoVersionCheck = FALSE
	}

	dialog strf("%.1fMBの通信が発生しますがよろしいですか？", 1.0*ffmpegDownloadSize/1048576.0), 2, "ffmpegのダウンロードを開始します"
	if (stat != 6){
		nidPop
		return
	}

	sendmsg hDLFfmpegProgress, PBM_SETRANGE, 0, MAKELPARAM(0,int(1.2*ffmpegDownloadSize/4096))
	download ffmpegDownloadServer, ffmpegDownloadFilePath, ffmpegzip, hDLFfmpegProgress
	if (stat != 200){
		dialog "次の原因が考えられます\n配信サーバーのダウン\nインターネット未接続",0,"ダウンロードに失敗しました"
		nidPop
		return
	}

	downloadedHash = GetHash_SHA1(ffmpegzip, ffmpegDownloadSize)
	logmes "downloadedHash "+downloadedHash

	if (ffmpegDownloadHash != downloadedHash){
	    dim ffmpegzip
	    dialog "ダウンロードしたファイルが破損しています\nダウンロードに失敗しました"
		nidPop
	    return
	}

	if PathIsDirectory(dir_exe+"\\bin") = 0{
		dirCur = dir_cur
		chdir dir_exe
		mkdir "bin"
		chdir dirCur
	}

	ffmpegSavename = strf("ffmpeg_tmp%x%x%x.zip", rnd(4096), rnd(4096), rnd(4096))
	bsave strf("%s\\%s",dir_exe,ffmpegSavename), ffmpegzip, ffmpegDownloadSize
    dim ffmpegzip

    unzip strf("%s\\%s",dir_exe,ffmpegSavename), dir_exe, 10
    if (stat!=0){
		exec dir_exe, 16
        dialog strf("%sを解凍し、中のffmpeg.exeを一覧めいかー改二のフォルダにあるbinフォルダに移動させてください\n移動したら、OKを押してください。",ffmpegSavename), 0, "ダウンロードしたファイルの解凍に失敗しました"
		if ( _exist(dir_exe+"\\bin\\ffmpeg.exe") <= 0){
			dialog "binフォルダ内にffmpegが見つかりませんでした", 0, "ダウンロードを中止します"
			nidPop
			return
		}
		ffmpegDir = dir_exe+"\\bin\\ffmpeg.exe"
		mode = MODE_OPTION
		optionMode = OPMODE_VIDEOCAPTURE
		gosub *drawMainWindow
		await
		dialog "続いて、オーディオデバイスを選択してください。", 0, "ダウンロードが完了しました！"
		nidPop
		return
    }
	sendmsg hProgress, $402, int(1.1*ffmpegDownloadSize/4096)

    tempStr = ffmpegDownloadFilePath
    strrep tempStr, "/", "\\"
    bcopy strf("%s\\%s\\bin\\ffmpeg.exe", dir_exe, getpath@getpathMod(tempStr, 9)), dir_exe+"\\bin\\ffmpeg.exe"

	delete strf("%s\\%s", dir_exe, ffmpegSavename)
    deletefolder strf("%s\\%s", dir_exe, getpath@getpathMod(tempStr, 9))

	ffmpegDir = dir_exe+"\\bin\\ffmpeg.exe"
	sendmsg hProgress, $402, int(1.2*ffmpegDownloadSize/4096)

	mode = MODE_OPTION
	optionMode = OPMODE_VIDEOCAPTURE
	gosub *drawMainWindow
	await
	dialog "続いて、オーディオデバイスを選択してください。", 0, "ダウンロードが完了しました！"

	nidPop
return
